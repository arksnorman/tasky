name: Infrastructure deployment workflow

on:
  workflow_run:
    workflows: ["deploy docker image workflow"]
    types: [completed]

jobs:
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    outputs:
      instance-public-ip: ${{ steps.cloudformation.outputs.InstancePublicIP }}
      instance-private-ip: ${{ steps.cloudformation.outputs.InstancePrivateIP }}
      bucket-name: ${{ steps.cloudformation.outputs.BucketName }}

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET }}
          aws-region: ${{ vars.AWS_REGION }}
  
      - name: Deploy to AWS CloudFormation
        id: cloudformation
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: "MyStack-${{ github.ref_name }}"
          template: automations/cfn.yaml
          no-fail-on-empty-changeset: "1"
          parameter-overrides: >-
            KeyName=${{ vars.SSH_KEY_NAME }},
            MongoAmiId=${{ vars.MONGO_AMI_ID }},
            BranchName=${{ github.ref_name }},
            ClusterName=${{ vars.CLUSTER_NAME }}
          capabilities: CAPABILITY_NAMED_IAM

      - name: Show CloudFormation outputs
        run: |
          echo "Stack outputs:"
          echo "Instance Private IP: ${{ steps.cloudformation.outputs.InstancePrivateIP }}"
          echo "Instance Public IP: ${{ steps.cloudformation.outputs.InstancePublicIP }}"
          echo "Bucket Name: ${{ steps.cloudformation.outputs.BucketName }}"
  
  run-ansible:
    name: Setup DB with Ansible
    runs-on: ubuntu-latest
    needs: deploy-infrastructure

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install Ansible
        run: |
          if ! command -v ansible &> /dev/null
          then
              echo "Ansible could not be found, installing..."
              sudo apt update
              sudo apt install software-properties-common -y
              sudo add-apt-repository --update ppa:ansible/ansible -y
              sudo apt install ansible -y
          else
              echo "Ansible is already installed"
          fi

      - name: Create vars.yaml for Ansible
        run: |
          cat <<EOF > vars.yaml
          ---
          download_url: "${{ vars.MONGO_SERVER_DOWNLOAD_URL }}"
          download_dest: "${{ vars.MONGO_SERVER_BINARY_DEST }}"
          mongo_bind_ip: "${{ needs.deploy-infrastructure.outputs.instance-private-ip }}"
          mongosh_dest: "${{ vars.MONGOSH_BINARY_DEST }}"
          mongosh_url: "${{ vars.MONGOSH_DOWNLOAD_URL }}"
          db_tools_url: "${{ vars.MONGO_TOOLS_URL }}"
          download_tools_dest: "${{ vars.MONGO_TOOLS_DEST }}"
          bucket_name: "${{ needs.deploy-infrastructure.outputs.bucket-name }}"
          db_name: "${{ vars.DB_NAME }}"
          db_user: "${{ vars.DB_USER }}"
          db_pass: "${{ secrets.DB_PASSWORD }}"
          EOF

      - name: Run Ansible Playbook to Setup DB
        env:
          INSTANCE_IP: ${{ needs.deploy-infrastructure.outputs.instance-public-ip }}
        run: |
          eval "$(ssh-agent -s)"
          echo "${{ secrets.SSH_KEY }}" | ssh-add -
          ssh-add -l
          ansible-playbook --ssh-common-args='-o StrictHostKeyChecking=no' --user ubuntu -e @vars.yaml -i ${{ env.INSTANCE_IP }}, automations/ansible.yaml

  deploy-on-eks:
    name: Deploy on EKS
    runs-on: ubuntu-latest
    needs: run-ansible
    steps:
      - name: Install kubectl
        run: |
          sudo snap install kubectl --classic
          kubectl version --client

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ${{ vars.CLUSTER_NAME }} --region ${{ vars.AWS_REGION }}

      - name: Create Config Map in ${{ vars.NAMESPACE }} namespace
        env:
          INSTANCE_IP: ${{ needs.deploy-infrastructure.outputs.instance-private-ip }}
        run: |
          echo "Instance Private IP: ${{ env.INSTANCE_IP }}"
          kubectl create namespace ${{ vars.NAMESPACE }} || echo "Namespace ${{ vars.NAMESPACE }} already exists"
          kubectl config set-context --current --namespace=${{ vars.NAMESPACE }}
          kubectl create configmap tasky-config --from-literal=SECRET_KEY=${{ secrets.APP_SECRET }} --from-literal=MONGO_URI="mongodb://${{ vars.DB_USER }}:${{ secrets.DB_PASSWORD }}@${{ env.INSTANCE_IP }}:27017/${{ vars.DB_NAME }}" --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy Application to EKS
        run: |
          pwd && ls -lha
          kubectl apply -f ./automations/k8s.yaml
          kubectl rollout status deployment/tasky-app-deployment -n ${{ vars.NAMESPACE }} --timeout=120s

      - name: Verify Deployment
        run: |
          kubectl get all -n ${{ vars.NAMESPACE }}

      # kubectl get configmap app-config -n ${{ vars.NAMESPACE }} -o yaml

      - name: Display services in namespace to output elb URL
        run: |
          kubectl get services -n ${{ vars.NAMESPACE }}
