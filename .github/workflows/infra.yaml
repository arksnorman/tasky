name: Infrastructure deployment workflow

on:
  workflow_run:
    workflows: ["deploy docker image workflow"]
    types: [completed]

jobs:
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    outputs:
      instance-public-ip: ${{ steps.cloudformation.outputs.InstancePublicIP }}
      instance-private-ip: ${{ steps.cloudformation.outputs.InstancePrivateIP }}
      bucket-name: ${{ steps.cloudformation.outputs.BucketName }}

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET }}
          aws-region: ${{ vars.AWS_REGION }}
  
      - name: Deploy to AWS CloudFormation
        id: cloudformation
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: "MyStack-${{ github.ref_name }}"
          template: cfn.yaml
          no-fail-on-empty-changeset: "1"
          parameter-overrides: >-
            VpcId=${{ vars.VPC_ID }},
            PublicSubnetId=${{ vars.PUBLIC_SUBNET }},
            AMIID=${{ vars.AMI_ID }},
            KeyName=${{ vars.SSH_KEY_NAME }},
            InstanceType=${{ vars.INSTANCE_TYPE }},
            BranchName=${{ github.ref_name }}
          capabilities: CAPABILITY_NAMED_IAM

      - name: Show CloudFormation outputs
        run: |
          echo "Stack outputs:"
          echo "Instance Private IP: ${{ steps.cloudformation.outputs.InstancePrivateIP }}"
          echo "Instance Public IP: ${{ steps.cloudformation.outputs.InstancePublicIP }}"
          echo "Bucket Name: ${{ steps.cloudformation.outputs.BucketName }}"
  
  run-ansible:
    name: Setup DB with Ansible
    runs-on: ubuntu-latest
    needs: deploy-infrastructure

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install Ansible
        run: |
          if ! command -v ansible &> /dev/null
          then
              echo "Ansible could not be found, installing..."
              sudo apt update
              sudo apt install software-properties-common -y
              sudo add-apt-repository --update ppa:ansible/ansible -y
              sudo apt install ansible -y
          else
              echo "Ansible is already installed"
          fi

      - name: Add SSH Key in memory
        run: |
          eval "$(ssh-agent -s)"
          echo "${{ secrets.SSH_KEY }}" | ssh-add -
          ssh-add -l
      
      - name: Debug SSH agent
        run: |
          ssh-add -l

      - name: Create vars.yaml for Ansible
        env:
          MONGO_BIND_IP: ${{ needs.deploy-infrastructure.outputs.instance-public-ip }}
        run: |
          cat <<EOF > vars.yaml
          ---
          download_url: "${{ vars.MONGO_SERVER_DOWNLOAD_URL }}"
          download_dest: "${{ vars.MONGO_SERVER_BINARY_DEST }}"
          mongo_bind_ip: "${{ steps.cloudformation.outputs.InstancePublicIP }}"
          mongosh_dest: "${{ vars.MONGOSH_BINARY_DEST }}"
          mongosh_url: "${{ vars.MONGOSH_DOWNLOAD_URL }}"
          db_tools_url: "${{ vars.MONGO_TOOLS_URL }}"
          download_tools_dest: "${{ vars.MONGO_TOOLS_DEST }}"
          EOF

      - name: Run Ansible Playbook to Setup DB
        env:
          INSTANCE_IP: ${{ needs.deploy-infrastructure.outputs.instance-public-ip }}
        run: |
          ansible-playbook --ssh-common-args='-o StrictHostKeyChecking=no' --user ubuntu -e @vars.yaml -i ${{ env.INSTANCE_IP }}, ansible-deploy.yaml
